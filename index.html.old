<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec2 vTextureCoord;
    varying vec3 vLightWeighting;

    uniform float uAlpha;

    uniform sampler2D uSampler;

    void main(void) {
        vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        gl_FragColor = vec4(textureColor.rgb * vLightWeighting, textureColor.a * uAlpha);
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexNormal;
    attribute vec2 aTextureCoord;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

    uniform vec3 uAmbientColor;

    uniform vec3 uLightingDirection;
    uniform vec3 uDirectionalColor;

    uniform bool uUseLighting;

    varying vec2 vTextureCoord;
    varying vec3 vLightWeighting;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vTextureCoord = aTextureCoord;

        if (!uUseLighting) {
            vLightWeighting = vec3(1.0, 1.0, 1.0);
        } else {
            vec3 transformedNormal = uNMatrix * aVertexNormal;
            float directionalLightWeighting = max(dot(transformedNormal, uLightingDirection), 0.0);
            vLightWeighting = uAmbientColor + uDirectionalColor * directionalLightWeighting;
        }
    }
</script>


<script type="text/javascript">

    var gl;

    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

        shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
        shaderProgram.useLightingUniform = gl.getUniformLocation(shaderProgram, "uUseLighting");
        shaderProgram.ambientColorUniform = gl.getUniformLocation(shaderProgram, "uAmbientColor");
        shaderProgram.lightingDirectionUniform = gl.getUniformLocation(shaderProgram, "uLightingDirection");
        shaderProgram.directionalColorUniform = gl.getUniformLocation(shaderProgram, "uDirectionalColor");
        shaderProgram.alphaUniform = gl.getUniformLocation(shaderProgram, "uAlpha");
    }


    function handleLoadedTexture(texture) {
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
        gl.generateMipmap(gl.TEXTURE_2D);

        gl.bindTexture(gl.TEXTURE_2D, null);
    }


    var glassTexture;

    function initTexture() {
        glassTexture = gl.createTexture();
        glassTexture.image = new Image();
        glassTexture.image.onload = function () {
            handleLoadedTexture(glassTexture)
        }

        glassTexture.image.src = "all_wikisigns2.jpg";
    }


    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }


    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);

        var normalMatrix = mat3.create();
        mat4.toInverseMat3(mvMatrix, normalMatrix);
        mat3.transpose(normalMatrix);
        gl.uniformMatrix3fv(shaderProgram.nMatrixUniform, false, normalMatrix);
    }


    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }



    var xRot = 0;
    var xSpeed = 3;

    var yRot = 0;
    var ySpeed = -3;

    var z = -5.0;


    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
    }


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }


    function handleKeys() {
        if (currentlyPressedKeys[33]) {
            // Page Up
            z -= 0.05;
        }
        if (currentlyPressedKeys[34]) {
            // Page Down
            z += 0.05;
        }
        if (currentlyPressedKeys[37]) {
            // Left cursor key
            ySpeed -= 1;
        }
        if (currentlyPressedKeys[39]) {
            // Right cursor key
            ySpeed += 1;
        }
        if (currentlyPressedKeys[38]) {
            // Up cursor key
            xSpeed -= 1;
        }
        if (currentlyPressedKeys[40]) {
            // Down cursor key
            xSpeed += 1;
        }
    }


    var cubeVertexPositionBuffer;
    var cubeVertexNormalBuffer;
    var cubeVertexTextureCoordBuffer;
    var cubeVertexIndexBuffer;
    function initBuffers() {
        cubeVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
  //      characters = [
	//  'ewx', '', 'c', 'z',
         // 'a', 'dm', 'h', 't',
	  //'goq', 'klrsv', 'iy', 'j'
	  //'u', 'bn', '', 'f',
	//];

var abstand = 0.088235294117647;
//var abstand = 3.14;

        var all_vertices = [];
	all_vertices[0] = [
            // ewx0 eckteil unten links vorne
            -1.0-abstand,  -1.0-abstand,  1.0+abstand,
             0.0-abstand,  -0.5-abstand,  1.0+abstand,
             0.0-abstand,   0.0-abstand,  0.0+abstand,
            -1.0-abstand,  -0.5-abstand,  0.0+abstand,

            // ewx0 eckteil unten links vorne
            -1.0-abstand,   0.0-abstand,  1.0+abstand,
             0.0-abstand,  -0.5-abstand,  1.0+abstand,
             0.0-abstand,   0.0-abstand,  0.0+abstand,
            -1.0-abstand,  -0.5-abstand,  0.0+abstand,
	];
	all_vertices[1] = [
	];
	all_vertices[2] = [
            // c8 eckteil oben links vorne
            -1.0-abstand,  1.0+abstand,  1.0+abstand,
             0.0-abstand,  0.5+abstand,  1.0+abstand,
             0.0-abstand,  0.0+abstand,  0.0+abstand,
            -1.0-abstand,  0.5+abstand,  0.0+abstand,

            // c8 eckteil oben links vorne
            -1.0-abstand,  0.0+abstand,  1.0+abstand,
             0.0-abstand,  0.5+abstand,  1.0+abstand,
             0.0-abstand,  0.0+abstand,  0.0+abstand,
            -1.0-abstand,  0.5+abstand,  0.0+abstand,
	];
	all_vertices[3] = [
	    // z8 deckel
            -1.0,  1.0+2*abstand,  1.0,
             0.0,  0.5+2*abstand,  1.0,
             0.0,  0.0+2*abstand,  0.0,
            -1.0,  0.5+2*abstand,  0.0,

            // z8 deckel
             1.0,  1.0+2*abstand,  1.0,
             1.0,  0.5+2*abstand,  0.0,
             0.0,  0.0+2*abstand,  0.0,
             0.0,  0.5+2*abstand,  1.0,

            // z8 deckel
            -1.0,  1.0+2*abstand,  -1.0,
             0.0,  0.5+2*abstand,  -1.0,
             0.0,  0.0+2*abstand,  0.0,
            -1.0,  0.5+2*abstand,  0.0,

            // z8 deckel
             1.0,  1.0+2*abstand,  -1.0,
             1.0,  0.5+2*abstand,  0.0,
             0.0,  0.0+2*abstand,  0.0,
             0.0,  0.5+2*abstand,  -1.0,
	];
	all_vertices[4] = [
            // a2 mittelteil vorne
             0.0,   0.5,  1.0+2*abstand,
            -1.0,   0.0,  1.0+2*abstand,
             0.0,   0.0,  0.0+2*abstand,

            // a2 mittelteil vorne
             0.0,   0.5,  1.0+2*abstand,
             1.0,   0.0,  1.0+2*abstand,
             0.0,   0.0,  0.0+2*abstand,

            // a2 mittelteil vorne
             0.0,  -0.5,  1.0+2*abstand,
            -1.0,   0.0,  1.0+2*abstand,
             0.0,   0.0,  0.0+2*abstand,
            
            // a2 mittelteil vorne
             0.0,  -0.5,  1.0+2*abstand,
             1.0,   0.0,  1.0+2*abstand,
             0.0,   0.0,  0.0+2*abstand,
	];

	all_vertices[5] = [
            // dm3 eckteil unten links hinten
            -1.0-abstand,  -1.0-abstand,  -1.0-abstand,
             0.0-abstand,  -0.5-abstand,  -1.0-abstand,
             0.0-abstand,   0.0-abstand,   0.0-abstand,
            -1.0-abstand,  -0.5-abstand,   0.0-abstand,

            // dm3 eckteil unten links hinten
            -1.0-abstand,   0.0-abstand,  -1.0-abstand,
             0.0-abstand,  -0.5-abstand,  -1.0-abstand,
             0.0-abstand,   0.0-abstand,   0.0-abstand,
            -1.0-abstand,  -0.5-abstand,   0.0-abstand,
	];

	all_vertices[6] = [
            // h5 mittelteil links
             -1.0-2*abstand,   0.0,  1.0,
             -1.0-2*abstand,   0.5,  0.0,
              0.0-2*abstand,   0.0,  0.0,

            // h5 mittelteil links
             -1.0-2*abstand,   0.0,  -1.0,
             -1.0-2*abstand,   0.5,   0.0,
              0.0-2*abstand,   0.0,   0.0,

            // h5 mittelteil links
             -1.0-2*abstand,    0.0,  1.0,
             -1.0-2*abstand,   -0.5,  0.0,
              0.0-2*abstand,    0.0,  0.0,

            // h5 mittelteil links
             -1.0-2*abstand,    0.0,  -1.0,
             -1.0-2*abstand,   -0.5,   0.0,
              0.0-2*abstand,    0.0,   0.0,
	];

	all_vertices[7] = [
             // t2 eckteil oben links hinten
            -1.0-abstand,  1.0+abstand,  -1.0-abstand,
             0.0-abstand,  0.5+abstand,  -1.0-abstand,
             0.0-abstand,  0.0+abstand,   0.0-abstand,
            -1.0-abstand,  0.5+abstand,   0.0-abstand,

             // t2 eckteil oben links hinten
            -1.0-abstand,  0.0+abstand,  -1.0-abstand,
             0.0-abstand,  0.5+abstand,  -1.0-abstand,
             0.0-abstand,  0.0+abstand,   0.0-abstand,
            -1.0-abstand,  0.5+abstand,   0.0-abstand,
	];

	all_vertices[8] = [
            // goq9 eckteil unten rechts vorne
             1.0+abstand,  -1.0-abstand,  1.0+abstand,
             0.0+abstand,  -0.5-abstand,  1.0+abstand,
             0.0+abstand,   0.0-abstand,  0.0+abstand,
             1.0+abstand,  -0.5-abstand,  0.0+abstand,

            // goq9 eckteil unten rechts vorne
             1.0+abstand,   0.0-abstand,  1.0+abstand,
             0.0+abstand,  -0.5-abstand,  1.0+abstand,
             0.0+abstand,   0.0-abstand,  0.0+abstand,
             1.0+abstand,  -0.5-abstand,  0.0+abstand,
	];

	all_vertices[9] = [
            // klrsv4 mittelteil rechts
             1.0+2*abstand,   0.0,  1.0,
             1.0+2*abstand,   0.5,  0.0,
             0.0+2*abstand,   0.0,  0.0,

            // klrsv4 mittelteil rechts
             1.0+2*abstand,   0.0,  -1.0,
             1.0+2*abstand,   0.5,   0.0,
             0.0+2*abstand,   0.0,   0.0,

            // klrsv4 mittelteil rechts
             1.0+2*abstand,    0.0,  1.0,
             1.0+2*abstand,   -0.5,  0.0,
             0.0+2*abstand,    0.0,  0.0,

            // klrsv4 mittelteil rechts
             1.0+2*abstand,    0.0,  -1.0,
             1.0+2*abstand,   -0.5,   0.0,
             0.0+2*abstand,    0.0,   0.0,
	];

	all_vertices[10] = [
             // iy1 eckteil oben rechts vorne
             1.0+abstand,  1.0+abstand,  1.0+abstand,
             0.0+abstand,  0.5+abstand,  1.0+abstand,
             0.0+abstand,  0.0+abstand,  0.0+abstand,
             1.0+abstand,  0.5+abstand,  0.0+abstand,

             // iy1 eckteil oben rechts vorne
             1.0+abstand,  0.0+abstand,  1.0+abstand,
             0.0+abstand,  0.5+abstand,  1.0+abstand,
             0.0+abstand,  0.0+abstand,  0.0+abstand,
             1.0+abstand,  0.5+abstand,  0.0+abstand,
	];

	all_vertices[11] = [
            // j1 mittelteil hinten
             0.0,   0.5,  -1.0-2*abstand,
            -1.0,   0.0,  -1.0-2*abstand,
             0.0,   0.0,   0.0-2*abstand,

            // j1 mittelteil hinten
             0.0,   0.5,  -1.0-2*abstand,
             1.0,   0.0,  -1.0-2*abstand,
             0.0,   0.0,   0.0-2*abstand,

            // j1 mittelteil hinten
             0.0,  -0.5,  -1.0-2*abstand,
            -1.0,   0.0,  -1.0-2*abstand,
             0.0,   0.0,   0.0-2*abstand,
            
            // j1 mittelteil hinten
             0.0,  -0.5,  -1.0-2*abstand,
             1.0,   0.0,  -1.0-2*abstand,
             0.0,   0.0,   0.0-2*abstand,
	];

	all_vertices[12] = [
            // u7 boden
            -1.0,  -1.0-2*abstand,  1.0,
             0.0,  -0.5-2*abstand,  1.0,
             0.0,   0.0-2*abstand,  0.0,
            -1.0,  -0.5-2*abstand,  0.0,

            // u7 boden
             1.0,  -1.0-2*abstand,  1.0,
             1.0,  -0.5-2*abstand,  0.0,
             0.0,   0.0-2*abstand,  0.0,
             0.0,  -0.5-2*abstand,  1.0,

            // u7 boden
            -1.0,  -1.0-2*abstand,  -1.0,
             0.0,  -0.5-2*abstand,  -1.0,
             0.0,   0.0-2*abstand,   0.0,
            -1.0,  -0.5-2*abstand,   0.0,

            // u7 boden
             1.0,  -1.0-2*abstand,  -1.0,
             1.0,  -0.5-2*abstand,   0.0,
             0.0,   0.0-2*abstand,   0.0,
             0.0,  -0.5-2*abstand,  -1.0,
	];

	all_vertices[13] = [
             // bn6 eckteil unten rechts hinten
             1.0+abstand,  -1.0-abstand,  -1.0-abstand,
             0.0+abstand,  -0.5-abstand,  -1.0-abstand,
             0.0+abstand,   0.0-abstand,   0.0-abstand,
             1.0+abstand,  -0.5-abstand,   0.0-abstand,

             // bn6 eckteil unten rechts hinten
             1.0+abstand,   0.0-abstand,  -1.0-abstand,
             0.0+abstand,  -0.5-abstand,  -1.0-abstand,
             0.0+abstand,   0.0-abstand,   0.0-abstand,
             1.0+abstand,  -0.5-abstand,   0.0-abstand,
	];

	all_vertices[14] = [
	];

	all_vertices[15] = [
             // f7 eckteil oben rechts hinten
             1.0+abstand,  1.0+abstand,  -1.0-abstand,
             0.0+abstand,  0.5+abstand,  -1.0-abstand,
             0.0+abstand,  0.0+abstand,   0.0-abstand,
             1.0+abstand,  0.5+abstand,   0.0-abstand,

             // f7 eckteil oben rechts hinten
             1.0+abstand,  0.0+abstand,  -1.0-abstand,
             0.0+abstand,  0.5+abstand,  -1.0-abstand,
             0.0+abstand,  0.0+abstand,   0.0-abstand,
             1.0+abstand,  0.5+abstand,   0.0-abstand,
	];

	all_vertices[16] = [
            // orange vorne unten links
             -1.0,   -1.0,  1.0,
             -1.0,    1.0,  1.0,
              1.0,   -1.0,  1.0,
/*
            // gelb unten
             -1.0,   -1.0,  1.0,
              1.0,   -1.0,  1.0,
              1.0,   -1.0, -1.0,

            // grün rechts
             1.0,  -1.0,   1.0,
             1.0,  -1.0,  -1.0,
             1.0,   1.0,  -1.0,
            
            // hellblau hinten
             1.0,   1.0,  -1.0,
             1.0,  -1.0,  -1.0,
            -1.0,   1.0,  -1.0,

            // violett oben
             -1.0,   1.0,  -1.0,
             -1.0,   1.0,   1.0,
              1.0,   1.0,  -1.0,

            // magenta links
              -1.0,   1.0,   1.0,
              -1.0,   1.0,  -1.0,
              -1.0,  -1.0,   1.0,
*/
/*
            // orange vorne unten links
             -abstand,   -abstand,  abstand,
             -abstand,    abstand,  abstand,
              abstand,   -abstand,  abstand,

            // gelb unten
             -abstand,   -abstand,  abstand,
              abstand,   -abstand,  abstand,
              abstand,   -abstand, -abstand,

            // grün rechts
             abstand,  -abstand,   abstand,
             abstand,  -abstand,  -abstand,
             abstand,   abstand,  -abstand,
            
            // hellblau hinten
             abstand,   abstand,  -abstand,
             abstand,  -abstand,  -abstand,
            -abstand,   abstand,  -abstand,

            // violett oben
             -abstand,   abstand,  -abstand,
             -abstand,   abstand,   abstand,
             abstand,    abstand,  -abstand,

            // magenta links
              -abstand,   abstand,   abstand,
              -abstand,   abstand,  -abstand,
              -abstand,  -abstand,   abstand,
*/	
];


	var vertices = all_vertices[0].concat(all_vertices[1], all_vertices[2], all_vertices[3], all_vertices[4], all_vertices[5], all_vertices[6], all_vertices[7], all_vertices[8], all_vertices[9], all_vertices[10], all_vertices[11], all_vertices[12], all_vertices[13], all_vertices[14], all_vertices[15], all_vertices[16]);

        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        cubeVertexPositionBuffer.itemSize = 3;
        cubeVertexPositionBuffer.numItems = vertices.length / 3;

        cubeVertexNormalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
        var all_vertexNormals = [];
	
	all_vertexNormals[0] = [
             // ewx0 eckteil unten links vorne
             -1.0,  0.0,  1.0,
             -1.0,  0.0,  1.0,
             -1.0,  0.0,  1.0,
             -1.0,  0.0,  1.0,

             // ewx0 eckteil unten links vorne
             -1.0,  -1.0,  1.0,
             -1.0,  -1.0,  1.0,
             -1.0,  -1.0,  1.0,
             -1.0,  -1.0,  1.0,
        ];

	all_vertexNormals[1] = [
	];

	all_vertexNormals[2] = [
            // c8 eckteil oben links vorne
             -1.0,  0.0,  1.0,
             -1.0,  0.0,  1.0,
             -1.0,  0.0,  1.0,
             -1.0,  0.0,  1.0,

            // c8 eckteil oben links vorne
             -1.0,  1.0, 1.0,
             -1.0,  1.0, 1.0,
             -1.0,  1.0, 1.0,
             -1.0,  1.0, 1.0,
	];

	all_vertexNormals[3] = [
            // z8 deckel
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // z8 deckel
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // z8 deckel
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // z8 deckel
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
        ];

	all_vertexNormals[4] = [
            // a2 mittelteil vorne
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,

            // a2 mittelteil vorne
             0.0,  0.0, 1.0,
             0.0,  0.0, 1.0,
             0.0,  0.0, 1.0,

            // a2 mittelteil vorne
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,

            // a2 mittelteil vorne
             0.0,  0.0, 1.0,
             0.0,  0.0, 1.0,
             0.0,  0.0, 1.0,
	];

	all_vertexNormals[5] = [
            // dm3 eckteil unten links hinten
             -1.0,  0.0,  -1.0,
             -1.0,  0.0,  -1.0,
             -1.0,  0.0,  -1.0,
             -1.0,  0.0,  -1.0,

            // dm3 eckteil unten links hinten
             -1.0,  1.0, -1.0,
             -1.0,  1.0, -1.0,
             -1.0,  1.0, -1.0,
             -1.0,  1.0, -1.0,
	];

	all_vertexNormals[6] = [
            // h5 mittelteil links
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,

            // h5 mittelteil links
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,

            // h5 mittelteil links
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,

            // h5 mittelteil links
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
	];

	all_vertexNormals[7] = [
             // t2 eckteil oben links hinten
             -1.0,  0.0,  -1.0,
             -1.0,  0.0,  -1.0,
             -1.0,  0.0,  -1.0,
             -1.0,  0.0,  -1.0,

             // t2 eckteil oben links hinten
             -1.0,  1.0, -1.0,
             -1.0,  1.0, -1.0,
             -1.0,  1.0, -1.0,
             -1.0,  1.0, -1.0,
	];

	all_vertexNormals[8] = [
            // goq9 eckteil unten rechts vorne
             1.0,  0.0,  1.0,
             1.0,  0.0,  1.0,
             1.0,  0.0,  1.0,
             1.0,  0.0,  1.0,

            // goq9 eckteil unten rechts vorne
             1.0,  -1.0,  1.0,
             1.0,  -1.0,  1.0,
             1.0,  -1.0,  1.0,
             1.0,  -1.0,  1.0,
	];

	all_vertexNormals[9] = [
            // klrsv4 mittelteil rechts
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,

            // klrsv4 mittelteil rechts
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,

            // klrsv4 mittelteil rechts
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,

            // klrsv4 mittelteil rechts
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
             -1.0,  0.0,  0.0,
	];

	all_vertexNormals[10] = [
             // iy1 eckteil oben rechts vorne
             1.0,  0.0,  1.0,
             1.0,  0.0,  1.0,
             1.0,  0.0,  1.0,
             1.0,  0.0,  1.0,

             // iy1 eckteil oben rechts vorne
             1.0,  1.0, 1.0,
             1.0,  1.0, 1.0,
             1.0,  1.0, 1.0,
             1.0,  1.0, 1.0,
	];

	all_vertexNormals[11] = [
            // j1 mittelteil hinten
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,

            // j1 mittelteil hinten
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,

            // j1 mittelteil hinten
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,

            // j1 mittelteil hinten
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,
             0.0,  0.0,  -1.0,
	];

	all_vertexNormals[12] = [
            // u7 boden
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // u7 boden
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // u7 boden
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // u7 boden
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
	];

	all_vertexNormals[13] = [
             // bn6 eckteil unten rechts hinten
             1.0,  0.0,  -1.0,
             1.0,  0.0,  -1.0,
             1.0,  0.0,  -1.0,
             1.0,  0.0,  -1.0,

             // bn6 eckteil unten rechts hinten
             1.0,  -1.0,  -1.0,
             1.0,  -1.0,  -1.0,
             1.0,  -1.0,  -1.0,
             1.0,  -1.0,  -1.0,
	];

	all_vertexNormals[14] = [
	];

	all_vertexNormals[15] = [
             // f7 eckteil oben rechts hinten
             1.0,  0.0,  -1.0,
             1.0,  0.0,  -1.0,
             1.0,  0.0,  -1.0,
             1.0,  0.0,  -1.0,

             // f7 eckteil oben rechts hinten
             1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
	];

	all_vertexNormals[16] = [


            // a2 mittelteil vorne
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
/*
            // a2 mittelteil vorne
             0.0,  -1.0, 0.0,
             0.0,  -1.0, 0.0,
             0.0,  -1.0, 0.0,

            // a2 mittelteil vorne
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,

            // a2 mittelteil vorne
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,

            // a2 mittelteil vorne
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // a2 mittelteil vorne
             -1.0,  0.0, 0.0,
             -1.0,  0.0, 0.0,
             -1.0,  0.0, 0.0,
*/
	];

	var vertexNormals = all_vertexNormals[0].concat(all_vertexNormals[1], all_vertexNormals[2], all_vertexNormals[3], all_vertexNormals[4], all_vertexNormals[5], all_vertexNormals[6], all_vertexNormals[7], all_vertexNormals[8], all_vertexNormals[9], all_vertexNormals[10], all_vertexNormals[11], all_vertexNormals[12], all_vertexNormals[13], all_vertexNormals[14], all_vertexNormals[15], all_vertexNormals[16]);
	
//	var vertexNormals = all_vertexNormals[0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
        cubeVertexNormalBuffer.itemSize = 3;
        cubeVertexNormalBuffer.numItems = vertexNormals.length / 3;

        cubeVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);

	var all_textureCoords = [];
        all_textureCoords[0] = [
            // ewx0 eckteil unten links vorne
            0.0, 0.0,
            0.1, 0.0,
            0.1, 1.0,
            0.0, 1.0,

            // ewx0 eckteil unten links vorne
            0.1, 0.0,
            0.1, 1.0,
            0.0, 1.0,
            0.0, 0.0,

        ];

        all_textureCoords[1] = [
	];

        all_textureCoords[2] = [
            // c8 eckteil oben links vorne
            0.8, 0.0,
            0.9, 0.0,
            0.9, 1.0,
            0.8, 1.0,

            // c8 eckteil oben links vorne
            0.9, 0.0,
            0.9, 1.0,
            0.8, 1.0,
            0.8, 0.0,
	];

        all_textureCoords[3] = [
            // Front face
            0.8, 0.0,
            0.9, 0.0,
            0.9, 1.0,
            0.8, 1.0,

            // Back face
            0.9, 0.0,
            0.9, 1.0,
            0.8, 1.0,
            0.8, 0.0,

            // Top face
            0.8, 1.0,
            0.8, 0.0,
            0.9, 0.0,
            0.9, 1.0,

            // Bottom face
            0.9, 1.0,
            0.8, 1.0,
            0.8, 0.0,
            0.9, 0.0,
        ];
        all_textureCoords[4] = [
            // a2 mittelteil vorne
            0.2, 0.0,
            0.3, 0.0,
            0.3, 1.0,

            // a2 mittelteil vorne
            0.3, 0.0,
            0.3, 1.0,
            0.2, 1.0,

            // a2 mittelteil vorne
            0.2, 1.0,
            0.2, 0.0,
            0.3, 0.0,

            // a2 mittelteil vorne
            0.3, 1.0,
            0.2, 1.0,
            0.2, 0.0,
	];

        all_textureCoords[5] = [
            // dm3 eckteil unten links hinten
            0.4, 0.0,
            0.4, 1.0,
            0.3, 1.0,
            0.3, 0.0,

            // dm3 eckteil unten links hinten
            0.3, 0.0,
            0.4, 0.0,
            0.4, 1.0,
            0.3, 1.0,
	];

        all_textureCoords[6] = [
            // h5 mittelteil links
            0.5, 0.0,
            0.6, 0.0,
            0.6, 1.0,

            // h5 mittelteil links
            0.6, 0.0,
            0.6, 1.0,
            0.5, 1.0,

            // h5 mittelteil links
            0.5, 1.0,
            0.5, 0.0,
            0.6, 0.0,

            // h5 mittelteil links
            0.6, 1.0,
            0.5, 1.0,
            0.5, 0.0,
	];

        all_textureCoords[7] = [
            // t2 eckteil oben links hinten
            0.2, 0.0,
            0.3, 0.0,
            0.3, 1.0,
            0.2, 1.0,

            // t2 eckteil oben links hinten
            0.3, 0.0,
            0.3, 1.0,
            0.2, 1.0,
            0.2, 0.0,
	];

        all_textureCoords[8] = [
            // goq9 eckteil unten rechts vorne
            0.9, 0.0,
            1.0, 0.0,
            1.0, 1.0,
            0.9, 1.0,

            // goq9 eckteil unten rechts vorne
            1.0, 0.0,
            1.0, 1.0,
            0.9, 1.0,
            0.9, 0.0,
	];

        all_textureCoords[9] = [
            // klrsv4 mittelteil rechts
            0.4, 0.0,
            0.5, 0.0,
            0.5, 1.0,

            // klrsv4 mittelteil rechts
            0.5, 0.0,
            0.5, 1.0,
            0.4, 1.0,

            // klrsv4 mittelteil rechts
            0.4, 1.0,
            0.4, 0.0,
            0.5, 0.0,

            // klrsv4 mittelteil rechts
            0.5, 1.0,
            0.4, 1.0,
            0.4, 0.0,
	];

        all_textureCoords[10] = [
            // iy1 eckteil oben rechts vorne
            0.1, 0.0,
            0.2, 0.0,
            0.2, 1.0,
            0.1, 1.0,
            // iy1 eckteil oben rechts vorne
           
            0.2, 0.0,
            0.2, 1.0,
            0.1, 1.0,
            0.1, 0.0,
	];

        all_textureCoords[11] = [
            // j1 mittelteil hinten
            0.1, 0.0,
            0.2, 0.0,
            0.2, 1.0,

            // j1 mittelteil hinten
            0.2, 0.0,
            0.2, 1.0,
            0.1, 1.0,

            // j1 mittelteil hinten
            0.1, 1.0,
            0.1, 0.0,
            0.2, 0.0,

            // j1 mittelteil hinten
            0.2, 1.0,
            0.1, 1.0,
            0.1, 0.0,
	];

        all_textureCoords[12] = [
            // u7 boden
            0.7, 0.0,
            0.8, 0.0,
            0.8, 1.0,
            0.7, 1.0,

            // u7 boden
            0.8, 0.0,
            0.8, 1.0,
            0.7, 1.0,
            0.7, 0.0,

            // u7 boden
            0.7, 1.0,
            0.7, 0.0,
            0.8, 0.0,
            0.8, 1.0,

            // u7 boden
            0.8, 1.0,
            0.7, 1.0,
            0.7, 0.0,
            0.8, 0.0,	];

        all_textureCoords[13] = [
            // bn6 eckteil unten rechts hinten
            0.6, 0.0,
            0.7, 0.0,
            0.7, 1.0,
            0.6, 1.0,

            // bn6 eckteil unten rechts hinten
            0.7, 0.0,
            0.7, 1.0,
            0.6, 1.0,
            0.6, 0.0,
	];

        all_textureCoords[14] = [
	];

        all_textureCoords[15] = [
            0.7, 0.0,
            0.8, 0.0,
            0.8, 1.0,
            0.7, 1.0,

            // f7 eckteil oben rechts hinten
            0.8, 0.0,
            0.8, 1.0,
            0.7, 1.0,
            0.7, 0.0,

        all_textureCoords[16] = [


            0.0, 0.0,
            0.1, 0.0,
            0.1, 1.0,
  /*         
            1.0, 0.0,
            1.0, 1.0,
            0.9, 1.0,
           
            0.8, 0.0,
            0.8, 1.0,
            0.7, 1.0,
           
            0.0, 0.0,
            0.1, 0.0,
            0.1, 1.0,
           
            1.0, 0.0,
            1.0, 1.0,
            0.9, 1.0,
           
            0.8, 0.0,
            0.8, 1.0,
            0.7, 1.0,
    */       
	];

	var textureCoords = all_textureCoords[0].concat(all_textureCoords[1], all_textureCoords[2], all_textureCoords[3], all_textureCoords[4], all_textureCoords[5], all_textureCoords[6], all_textureCoords[7], all_textureCoords[8], all_textureCoords[9], all_textureCoords[10], all_textureCoords[11], all_textureCoords[12], all_textureCoords[13], all_textureCoords[14], all_textureCoords[15], all_textureCoords[16]);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        cubeVertexTextureCoordBuffer.itemSize = 2;
        cubeVertexTextureCoordBuffer.numItems = textureCoords.length / 2;

        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
	var x = 0;
	var all_cubeVertexIndices = [];
	all_cubeVertexIndices[0] = [
            x+0, x+1, x+2,      x+0, x+2, x+3,	//0, 2, 1,	0, 3, 2,	// Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    	//4, 6, 5,	4, 7, 6,	// Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,

        ];

	x = x + all_vertices[0].length / 3;

	all_cubeVertexIndices[1] =[

	];

	x = x + all_vertices[1].length / 3;

	all_cubeVertexIndices[2] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[2].length / 3;

	all_cubeVertexIndices[3] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
            x+8, x+9, x+10,     x+8, x+10, x+11,  // Top face
            x+12, x+13, x+14,   x+12, x+14, x+15, // Bottom face
	    x+0, x+4, x+12, 
	    x+0, x+4, x+1,
	    x+0, x+12, x+8,
	    x+4, x+5, x+12,
	    x+8, x+12, x+15,
	    x+0, x+8, x+11,
      	];

	x = x + all_vertices[3].length / 3;

	all_cubeVertexIndices[4] =[
            x+0, x+1,  x+2,          // Front face
            x+3, x+4,  x+5,          // Back face
            x+6, x+7,  x+8,         // Top face
            x+9, x+10, x+11,       // Bottom face
	    x+0, x+1,  x+6,
	    x+0, x+4,  x+6,
	];

	x = x + all_vertices[4].length / 3;

	all_cubeVertexIndices[5] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[5].length / 3;

	all_cubeVertexIndices[6] =[
            x+0, x+1, x+2,      
	    x+3, x+4, x+5,
	    x+6, x+7, x+8,
	    x+9, x+10, x+11,
	    x+0, x+4, x+7,
	    x+3, x+4, x+7,
	];

	x = x + all_vertices[6].length / 3;

	all_cubeVertexIndices[7] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[7].length / 3;

	all_cubeVertexIndices[8] =[
	    x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face	];
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[8].length / 3;

	all_cubeVertexIndices[9] =[
            x+0, x+1, x+2,          // Front face
            x+3, x+4, x+5,          // Back face
            x+6, x+7, x+8,         // Top face
            x+9, x+10, x+11,       // Bottom face
	    x+4, x+0, x+7,
	    x+4, x+3, x+7,
	];

	x = x + all_vertices[9].length / 3;

	all_cubeVertexIndices[10] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[10].length / 3;

	all_cubeVertexIndices[11] =[
            x+0, x+1, x+2,          // Front face
            x+3, x+4, x+5,          // Back face
            x+6, x+7, x+8,         // Top face
            x+9, x+10, x+11,       // Bottom face
	    x+0, x+1,  x+6,
	    x+0, x+4,  x+6,
	];

	x = x + all_vertices[11].length / 3;

	all_cubeVertexIndices[12] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,   // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
            x+8, x+9, x+10,     x+8, x+10, x+11,  // Top face
            x+12, x+13, x+14,   x+12, x+14, x+15, // Bottom face
	    x+0, x+4, x+12, 
	    x+0, x+4, x+1,
	    x+0, x+12, x+8,
	    x+4, x+5, x+12,
	    x+8, x+12, x+15,
	    x+0, x+8, x+11,
	];

	x = x + all_vertices[12].length / 3;

	all_cubeVertexIndices[13] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[13].length / 3;

	all_cubeVertexIndices[14] =[
	];, all_cubeVertexIndices[15]

	x = x + all_vertices[14].length / 3;

	all_cubeVertexIndices[15] =[
            x+0, x+1, x+2,      x+0, x+2, x+3,    // Front face
            x+4, x+5, x+6,      x+4, x+6, x+7,    // Back face
	    x+0, x+5, x+4,	 x+0, x+7, x+4,
	];

	x = x + all_vertices[15].length / 3;

	all_cubeVertexIndices[16] =[
            x+0, x+1, x+2,          // Front face
      /*      x+3, x+4, x+5,          // Back face
            x+6, x+7, x+8,         // Top face
            x+9, x+10, x+11,       // Bottom face
            x+12, x+13, x+14,       // Bottom face
            x+15, x+16, x+17,       // Bottom face*/
	];

	var cubeVertexIndices = all_cubeVertexIndices[0].concat(all_cubeVertexIndices[1], all_cubeVertexIndices[2], all_cubeVertexIndices[3], all_cubeVertexIndices[4], all_cubeVertexIndices[5], all_cubeVertexIndices[6], all_cubeVertexIndices[7], all_cubeVertexIndices[8], all_cubeVertexIndices[9], all_cubeVertexIndices[10], all_cubeVertexIndices[11], all_cubeVertexIndices[12], all_cubeVertexIndices[13], all_cubeVertexIndices[14], all_cubeVertexIndices[15], all_cubeVertexIndices[16]);

	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cubeVertexIndexBuffer.itemSize = 1;
        cubeVertexIndexBuffer.numItems = cubeVertexIndices.length;
    }


    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);

        mat4.translate(mvMatrix, [0.0, 0.0, z]);

        mat4.rotate(mvMatrix, degToRad(xRot), [1, 0, 0]);
        mat4.rotate(mvMatrix, degToRad(yRot), [0, 1, 0]);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, cubeVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, glassTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);

        var blending = document.getElementById("blending").checked;
        if (blending) {
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
            gl.enable(gl.BLEND);
            gl.disable(gl.DEPTH_TEST);
            gl.uniform1f(shaderProgram.alphaUniform, parseFloat(document.getElementById("alpha").value));
        } else {
            gl.disable(gl.BLEND);
            gl.enable(gl.DEPTH_TEST);
        }

        var lighting = document.getElementById("lighting").checked;
        gl.uniform1i(shaderProgram.useLightingUniform, lighting);
        if (lighting) {
            gl.uniform3f(
                shaderProgram.ambientColorUniform,
                parseFloat(document.getElementById("ambientR").value),
                parseFloat(document.getElementById("ambientG").value),
                parseFloat(document.getElementById("ambientB").value)
            );

            var lightingDirection = [
                parseFloat(document.getElementById("lightDirectionX").value),
                parseFloat(document.getElementById("lightDirectionY").value),
                parseFloat(document.getElementById("lightDirectionZ").value)
            ];
            var adjustedLD = vec3.create();
            vec3.normalize(lightingDirection, adjustedLD);
            vec3.scale(adjustedLD, -1);
            gl.uniform3fv(shaderProgram.lightingDirectionUniform, adjustedLD);

            gl.uniform3f(
                shaderProgram.directionalColorUniform,
                parseFloat(document.getElementById("directionalR").value),
                parseFloat(document.getElementById("directionalG").value),
                parseFloat(document.getElementById("directionalB").value)
            );
        }

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    }


    var lastTime = 0;

    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            xRot += (xSpeed * elapsed) / 1000.0;
            yRot += (ySpeed * elapsed) / 1000.0;
        }
        lastTime = timeNow;
    }


    function tick() {
        requestAnimFrame(tick);
        handleKeys();
        drawScene();
        animate();
    }



    function webGLStart() {
        var canvas = document.getElementById("lesson08-canvas");
        initGL(canvas);
        initShaders();
        initBuffers();
        initTexture();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;

        tick();
    }

</script>


</head>


<body onload="webGLStart();">
    <a href="http://learningwebgl.com/blog/?p=859">&lt;&lt; Back to Lesson 8</a><br />
    <canvas id="lesson08-canvas" style="border: none;" width="500" height="500"></canvas>

    <br />
    <input type="checkbox" id="blending" checked /> Use blending<br/>
    Alpha level <input type="text" id="alpha" value="0.5" /><br/>

    <br/>
    <input type="checkbox" id="lighting" checked /> Use lighting<br/>


    (Use cursor keys to spin the box and <code>Page Up</code>/<code>Page Down</code> to zoom out/in)



    <br/>
    <h2>Directional light:</h2>

    <table style="border: 0; padding: 10px;">
        <tr>
            <td><b>Direction:</b>
            <td>X: <input type="text" id="lightDirectionX" value="-0.25" />
            <td>Y: <input type="text" id="lightDirectionY" value="-0.25" />
            <td>Z: <input type="text" id="lightDirectionZ" value="-1.0" />
        </tr>
        <tr>
            <td><b>Colour:</b>
            <td>R: <input type="text" id="directionalR" value="0.8" />
            <td>G: <input type="text" id="directionalG" value="0.8" />
            <td>B: <input type="text" id="directionalB" value="0.8" />
        </tr>
    </table>

    <h2>Ambient light:</h2>

    <table style="border: 0; padding: 10px;">
        <tr>
            <td><b>Colour:</b>
            <td>R: <input type="text" id="ambientR" value="0.2" />
            <td>G: <input type="text" id="ambientG" value="0.2" />
            <td>B: <input type="text" id="ambientB" value="0.2" />
        </tr>
    </table>

    <a href="http://learningwebgl.com/blog/?p=859">&lt;&lt; Back to Lesson 8</a>

    <!-- Google Analytics stuff, please ignore - nothing to do with WebGL :-) 
    <script type="text/javascript">
        var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
        document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script>-->
    <script type="text/javascript">
        try {
            var pageTracker = _gat._getTracker("UA-2240015-5");
            pageTracker._trackPageview();
        } catch(err) {
        }
    </script>

</body>

</html>
